generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String     @unique
  password       String?
  profileImage   String?
  role           UserRole   @default(STUDENT)
  createdAt      DateTime?   @default(now())
  updatedAt      DateTime?   @updatedAt
  token          String?
  enrollments    Enrollment[]
}

model Course {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  price        Float
  previewURL   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  enrollments  Enrollment[]
  courseFeature CourseFeature[]
  isActive     Boolean      @default(true)
  isPaid       Boolean      @default(true)
}

model CourseFeature {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
  feature   String
}

model Enrollment {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  course       Course     @relation(fields: [courseId], references: [id])
  courseId     String     @db.ObjectId
  enrolledAt   DateTime   @default(now())
  payment      Payment?
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  enrollment    Enrollment    @relation(fields: [enrollmentId], references: [id])
  enrollmentId  String        @db.ObjectId @unique
  amount        Float
  method        String
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime      @default(now())
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
