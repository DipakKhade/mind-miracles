generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  password      String?
  profileImage  String?
  role          UserRole        @default(STUDENT)
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  token         String?
  enrollments   Enrollment[]
  videoProgress VideoProgress[]
}

model Course {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  price         Float
  thumbnailURL  String?
  previewURL    String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  enrollments   Enrollment[]
  courseFeature CourseFeature[]
  video         Video[]
  isActive      Boolean         @default(true)
  isPaid        Boolean         @default(true)
}

model CourseFeature {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])
  courseId String @db.ObjectId
  feature  String
}

model Enrollment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String   @db.ObjectId
  enrolledAt DateTime @default(now())
  payment    Payment?

  @@unique([courseId, userId])
}

model Video {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  vimeoId     String          @unique
  dayNumber   Int
  course      Course          @relation(fields: [courseId], references: [id])
  courseId    String          @db.ObjectId
  progress    VideoProgress[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model VideoProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  video       Video    @relation(fields: [videoId], references: [id])
  videoId     String   @db.ObjectId
  progress    Float    @default(0)
  completed   Boolean  @default(false)
  lastWatched DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, videoId])
}

model Payment {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  enrollment   Enrollment    @relation(fields: [enrollmentId], references: [id])
  enrollmentId String        @unique @db.ObjectId
  amount       Float
  method       String
  status       PaymentStatus @default(PENDING)
  paidAt       DateTime      @default(now())
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
